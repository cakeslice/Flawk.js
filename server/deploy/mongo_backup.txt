nano setup_mongo_backup.sh

----

#!/bin/bash

export AWS_ACCESS_KEY_ID=
export AWS_SECRET_ACCESS_KEY=
export ENDPOINT=https://YOUR_BUCKET_ENDPOINT
export BUCKET=YOUR_BUCKET_NAME
export MONGODB_HOST=localhost
export MONGODB_PORT=1337
export MONGODB_USER=
export MONGODB_PASS=
export BACKUP_FOLDER=your_project_prod/mongo_backups/

export CRON_TIME="0 3 * * *"
export TZ=Europe/Lisbon
export CRON_TZ=Europe/Lisbon

apt-get update && apt-get -y install cron awscli

MONGODB_HOST=${MONGODB_PORT_27017_TCP_ADDR:-${MONGODB_HOST}}
MONGODB_HOST=${MONGODB_PORT_1_27017_TCP_ADDR:-${MONGODB_HOST}}
MONGODB_PORT=${MONGODB_PORT_27017_TCP_PORT:-${MONGODB_PORT}}
MONGODB_PORT=${MONGODB_PORT_1_27017_TCP_PORT:-${MONGODB_PORT}}
MONGODB_USER=${MONGODB_USER:-${MONGODB_ENV_MONGODB_USER}}
MONGODB_PASS=${MONGODB_PASS:-${MONGODB_ENV_MONGODB_PASS}}

S3PATH="s3://$BUCKET/$BACKUP_FOLDER"

[[ ( -z "${MONGODB_USER}" ) && ( -n "${MONGODB_PASS}" ) ]] && MONGODB_USER='admin'

[[ ( -n "${MONGODB_USER}" ) ]] && USER_STR=" --username ${MONGODB_USER}"
[[ ( -n "${MONGODB_PASS}" ) ]] && PASS_STR=" --password '${MONGODB_PASS}'"
[[ ( -n "${MONGODB_DB}" ) ]] && DB_STR=" --db ${MONGODB_DB}"

# Export AWS Credentials into env file for cron job
printenv | sed 's/^\([a-zA-Z0-9_]*\)=\(.*\)$/export \1="\2"/g' | grep -E "^export AWS" > /root/project_env.sh

echo "=> Creating backup script"
rm -f /backup.sh
cat <<EOF >> /backup.sh
#!/bin/bash
export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
TIMESTAMP=\`/bin/date +"%Y%m%dT%H%M%S"\`
BACKUP_NAME=\${TIMESTAMP}.dump.gz
S3BACKUP=${S3PATH}\${BACKUP_NAME}
S3LATEST=${S3PATH}latest.dump.gz
echo "=> Backup started"
if mongodump --host ${MONGODB_HOST} --port ${MONGODB_PORT} ${USER_STR}${PASS_STR}${DB_STR} --archive=\${BACKUP_NAME} --gzip ${EXTRA_OPTS} && aws s3 cp \${BACKUP_NAME} \${S3BACKUP} --endpoint=${ENDPOINT} && aws s3 cp \${S3BACKUP} \${S3LATEST} --endpoint=${ENDPOINT} && rm \${BACKUP_NAME} ;then
    echo "   > Backup succeeded"
else
    echo "   > Backup failed"
fi
echo "=> Done"
EOF
chmod +x /backup.sh
echo "=> Backup script created"

echo "=> Creating restore script"
rm -f /restore.sh
cat <<EOF >> /restore.sh
#!/bin/bash
export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
if [[( -n "\${1}" )]];then
    RESTORE_ME=\${1}.dump.gz
else
    RESTORE_ME=latest.dump.gz
fi
S3RESTORE=${S3PATH}\${RESTORE_ME}
echo "=> Restore database from \${RESTORE_ME}"
if aws s3 cp \${S3RESTORE} \${RESTORE_ME} --endpoint=${ENDPOINT} && mongorestore --host ${MONGODB_HOST} --port ${MONGODB_PORT} ${USER_STR}${PASS_STR}${DB_STR} --drop ${EXTRA_OPTS} --archive=\${RESTORE_ME} --gzip && rm \${RESTORE_ME}; then
    echo "   Restore succeeded"
else
    echo "   Restore failed"
fi
echo "=> Done"
EOF
chmod +x /restore.sh
echo "=> Restore script created"

echo "=> Creating list script"
rm -f /listbackups.sh
cat <<EOF >> /listbackups.sh
#!/bin/bash
export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
aws s3 ls ${S3PATH} --endpoint=${ENDPOINT}
EOF
chmod +x /listbackups.sh
echo "=> List script created"

ln -s /restore.sh /usr/bin/restore
ln -s /backup.sh /usr/bin/backup
ln -s /listbackups.sh /usr/bin/listbackups

touch /mongo_backup.log

if [ -n "${INIT_BACKUP}" ]; then
    echo "=> Create a backup on the startup"
    /backup.sh
fi

if [ -n "${INIT_RESTORE}" ]; then
    echo "=> Restore store from latest backup on startup"
    /restore.sh
fi

if [ -z "${DISABLE_CRON}" ]; then
    echo "${CRON_TIME} . /root/project_env.sh; /backup.sh >> /mongo_backup.log 2>&1" > /crontab.conf
    crontab  /crontab.conf
    echo "=> Running cron job"
    cron && tail -f /mongo_backup.log
fi

----
----

Then run:

sudo chmod +x setup_mongo_backup.sh
sudo ./setup_mongo_backup.sh
/etc/init.d/cron restart

echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.0 multiverse" \
| sudo tee /etc/apt/sources.list.d/mongodb-org-4.0.list

sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 \
    --recv 9DA31620334BD75D9DCB49F368818C72E52529D4

sudo apt-get update && sudo apt-get install -y mongodb-org-tools

----
----

Lifecycle:

nano lifecycle.json

----

{
	"Rules": [
		{
			"ID": "mongo_backups",
			"Filter": {
				"Prefix": "your_project_prod/mongo_backups/"
			}, 
			"Status": "Enabled", 
			"Expiration": {
				"Days": 7
			}
		}
	]
}

----
----

nano set_lifecycle.sh

----

#!/bin/bash
export AWS_ACCESS_KEY_ID=YOUR_ACCESS_KEY
export AWS_SECRET_ACCESS_KEY=YOUR_SECRET_KEY
aws s3api put-bucket-lifecycle-configuration --endpoint=https://YOUR_BUCKET_ENDPOINT --bucket YOUR_BUCKET_NAME --lifecycle-configuration file://lifecycle.json
aws s3api get-bucket-lifecycle-configuration --endpoint=https://YOUR_BUCKET_ENDPOINT --bucket YOUR_BUCKET_NAME

----
----

sudo chmod +x set_lifecycle.sh
sudo ./set_lifecycle.sh

Commands:

To check crontab:
crontab -l (should have "... /backup.sh >> /mongo_backup.log 2>&1")

cd /usr/bin
sudo ./listbackups
sudo ./backup (for manual backup)
sudo ./restore (for latest backup)
sudo ./restore 20170406T155812

----

[Extra] Restore a single collection:

	Duplicate ./restore.sh and add this argument in mongo_restore: --nsInclude=db.collection

	Example: --nsInclude=your_project_prod.clients

	Then save as restore_collection.sh and:
	chmod +x /restore_collection.sh
	sudo ./restore_collection.sh 20170406T155812