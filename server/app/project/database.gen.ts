/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from 'mongoose'

/**
 * Lean version of ClientCoreArraysNotificationDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ClientDocument.toObject()`.
 * ```
 * const clientObject = client.toObject();
 * ```
 */
export type ClientCoreArraysNotification = {
	_id: mongoose.Types.ObjectId
	isRead: boolean
	date: Date
	notificationType: 'gotCoupon' | 'postLiked'
	data?: any
}

/**
 * Lean version of ClientArraysFriendDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ClientDocument.toObject()`.
 * ```
 * const clientObject = client.toObject();
 * ```
 */
export type ClientArraysFriend = {
	client?: Client['_id'] | Client
	addDate?: Date
	blocked?: boolean
}

/**
 * Lean version of ClientDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ClientDocument.toObject()`. To avoid conflicts with model names, use the type alias `ClientObject`.
 * ```
 * const clientObject = client.toObject();
 * ```
 */
export type Client = {
	permission: number
	access: {
		
		hashedPassword?: string
		activeTokens: string[]
	}
	core: {
		
		language?: 'en' | 'pt'
		stripeCustomer?: string
		mobileNotificationDevices: string[]
		timestamps: {
			
			lastCall?: Date
		}
		arrays: {
			
			notifications: ClientCoreArraysNotification[]
		}
	}
	email: string
	phone?: string
	reference: number
	state?: 'pending' | 'active' | 'canceled'
	flags: ('suspended' | 'verified')[]
	contexts: 'manager'[]
	personal: {
		
		firstName?: string
		lastName?: string
		photoURL?: string
		country?: string
		countryPhoneCode?: string
	}
	appState: {
		
		verificationCode?: number
	}
	timestamps: {
		
		created: {
			date?: Date
			by?: Client['_id'] | Client
		}
	}
	arrays: {
		
		friends: ClientArraysFriend[]
	}
	_id: mongoose.Types.ObjectId
}

/**
 * Lean version of ClientDocument (type alias of `Client`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Client } from "../models"
 * import { ClientObject } from "../interfaces/mongoose.gen.ts"
 *
 * const clientObject: ClientObject = client.toObject();
 * ```
 */
export type ClientObject = Client

/**
 * Mongoose Query types
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Client = mongoose.model<ClientDocument, ClientModel>("Client", ClientSchema);
 * ```
 */
export type ClientQueries = {}

export type ClientMethods = {}

export type ClientStatics = {}

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Client = mongoose.model<ClientDocument, ClientModel>("Client", ClientSchema);
 * ```
 */
export type ClientModel = mongoose.Model<ClientDocument, ClientQueries> & ClientStatics

/**
 * Mongoose Schema type
 *
 * Assign this type to new Client schema instances:
 * ```
 * const ClientSchema: ClientSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ClientSchema = mongoose.Schema<ClientDocument, ClientModel>

/**
 * Mongoose Subdocument type
 *
 * Type of `ClientDocument["core.arrays.notifications"]` element.
 */
export type ClientCoreArraysNotificationDocument = mongoose.Types.Subdocument & {
	_id: mongoose.Types.ObjectId
	isRead: boolean
	date: Date
	notificationType: 'gotCoupon' | 'postLiked'
	data?: any
}

/**
 * Mongoose Subdocument type
 *
 * Type of `ClientDocument["arrays.friends"]` element.
 */
export type ClientArraysFriendDocument = mongoose.Types.Subdocument & {
	client?: ClientDocument['_id'] | ClientDocument
	addDate?: Date
	blocked?: boolean
}

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Client = mongoose.model<ClientDocument, ClientModel>("Client", ClientSchema);
 * ```
 */
export type ClientDocument = mongoose.Document<mongoose.Types.ObjectId, ClientQueries> &
	ClientMethods & {
		permission: number
		access: {
			
			hashedPassword?: string
			activeTokens: mongoose.Types.Array<string>
		}
		core: {
			
			language?: 'en' | 'pt'
			stripeCustomer?: string
			mobileNotificationDevices: mongoose.Types.Array<string>
			timestamps: {
				
				lastCall?: Date
			}
			arrays: {
				
				notifications: mongoose.Types.DocumentArray<ClientCoreArraysNotificationDocument>
			}
		}
		email: string
		phone?: string
		reference: number
		state?: 'pending' | 'active' | 'canceled'
		flags: mongoose.Types.Array<'suspended' | 'verified'>
		contexts: mongoose.Types.Array<'manager'>
		personal: {
			
			firstName?: string
			lastName?: string
			photoURL?: string
			country?: string
			countryPhoneCode?: string
			fullName: any
		}
		appState: {
			
			verificationCode?: number
		}
		timestamps: {
			
			created: {
				date?: Date
				by?: ClientDocument['_id'] | ClientDocument
			}
		}
		arrays: {
			
			friends: mongoose.Types.DocumentArray<ClientArraysFriendDocument>
		}
		_id: mongoose.Types.ObjectId
	}

/**
 * Lean version of CountryDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `CountryDocument.toObject()`. To avoid conflicts with model names, use the type alias `CountryObject`.
 * ```
 * const countryObject = country.toObject();
 * ```
 */
export type Country = {
	countryCode: string
	name: {
		pt: string
		en: string
	}
	code: string
	_id: mongoose.Types.ObjectId
}

/**
 * Lean version of CountryDocument (type alias of `Country`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Country } from "../models"
 * import { CountryObject } from "../interfaces/mongoose.gen.ts"
 *
 * const countryObject: CountryObject = country.toObject();
 * ```
 */
export type CountryObject = Country

/**
 * Mongoose Query types
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Country = mongoose.model<CountryDocument, CountryModel>("Country", CountrySchema);
 * ```
 */
export type CountryQueries = {}

export type CountryMethods = {}

export type CountryStatics = {}

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Country = mongoose.model<CountryDocument, CountryModel>("Country", CountrySchema);
 * ```
 */
export type CountryModel = mongoose.Model<CountryDocument, CountryQueries> & CountryStatics

/**
 * Mongoose Schema type
 *
 * Assign this type to new Country schema instances:
 * ```
 * const CountrySchema: CountrySchema = new mongoose.Schema({ ... })
 * ```
 */
export type CountrySchema = mongoose.Schema<CountryDocument, CountryModel>

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Country = mongoose.model<CountryDocument, CountryModel>("Country", CountrySchema);
 * ```
 */
export type CountryDocument = mongoose.Document<mongoose.Types.ObjectId, CountryQueries> &
	CountryMethods & {
		countryCode: string
		name: {
			pt: string
			en: string
		}
		code: string
		_id: mongoose.Types.ObjectId
	}

/**
 * Lean version of RemoteConfigDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `RemoteConfigDocument.toObject()`. To avoid conflicts with model names, use the type alias `RemoteConfigObject`.
 * ```
 * const remoteconfigObject = remoteconfig.toObject();
 * ```
 */
export type RemoteConfig = {
	code: string
	maintenanceMode?: boolean
	publicMessage: {
		active?: boolean
		text?: string
		messageType?: string
	}
	_id: mongoose.Types.ObjectId
}

/**
 * Lean version of RemoteConfigDocument (type alias of `RemoteConfig`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { RemoteConfig } from "../models"
 * import { RemoteConfigObject } from "../interfaces/mongoose.gen.ts"
 *
 * const remoteconfigObject: RemoteConfigObject = remoteconfig.toObject();
 * ```
 */
export type RemoteConfigObject = RemoteConfig

/**
 * Mongoose Query types
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const RemoteConfig = mongoose.model<RemoteConfigDocument, RemoteConfigModel>("RemoteConfig", RemoteConfigSchema);
 * ```
 */
export type RemoteConfigQueries = {}

export type RemoteConfigMethods = {}

export type RemoteConfigStatics = {}

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const RemoteConfig = mongoose.model<RemoteConfigDocument, RemoteConfigModel>("RemoteConfig", RemoteConfigSchema);
 * ```
 */
export type RemoteConfigModel = mongoose.Model<RemoteConfigDocument, RemoteConfigQueries> &
	RemoteConfigStatics

/**
 * Mongoose Schema type
 *
 * Assign this type to new RemoteConfig schema instances:
 * ```
 * const RemoteConfigSchema: RemoteConfigSchema = new mongoose.Schema({ ... })
 * ```
 */
export type RemoteConfigSchema = mongoose.Schema<RemoteConfigDocument, RemoteConfigModel>

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const RemoteConfig = mongoose.model<RemoteConfigDocument, RemoteConfigModel>("RemoteConfig", RemoteConfigSchema);
 * ```
 */
export type RemoteConfigDocument = mongoose.Document<mongoose.Types.ObjectId, RemoteConfigQueries> &
	RemoteConfigMethods & {
		code: string
		maintenanceMode?: boolean
		publicMessage: {
			active?: boolean
			text?: string
			messageType?: string
		}
		_id: mongoose.Types.ObjectId
	}

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
	return doc instanceof mongoose.Document
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
	[ref in T]: Root[T] extends mongoose.Types.Array<infer U>
		? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
		: Exclude<Root[T], mongoose.Types.ObjectId>
}

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
	? PopulatedProperty<DocType, T>
	: ParentProperty<T> extends keyof DocType
	? Omit<DocType, ParentProperty<T>> & {
			[ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<
				infer U
			>
				? mongoose.Types.Array<
						ChildProperty<T> extends keyof U
							? PopulatedProperty<U, ChildProperty<T>>
							: PopulatedDocument<U, ChildProperty<T>>
				  >
				: ChildProperty<T> extends keyof DocType[ParentProperty<T>]
				? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
				: PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>
	  }
	: DocType
